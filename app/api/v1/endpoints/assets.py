from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from datetime import datetime, date
from app.db import models, schemas, crud
from app.api.v1.dependencies import get_db
from app.services.data_providers import YahooDataProvider
from app.services.select_and_filter import SelectStocks, StockFilteringService
from app.utils.enums import (
    SelectionCriteria,
    ValidationCriteria,
    YahooExtractionLib,
)
from app.services.financials_providers import YahooFinancialsProvider
from app.core.logger import iap_logger as logger

router = APIRouter()


@router.post("/save_trading_stocks")
def create_stock_filter(
    filtered_stocks: schemas.DailyStockFilter, db: Session = Depends(get_db)
):
    stock_models = []
    for stock in filtered_stocks.stock_symbols:
        stock_model = models.DailyStockFilter(
            stock_symbol=stock,
            provider=filtered_stocks.provider,
            filter_date=datetime.now().date(),
            reason="ManualSelection",
        )
        stock_models.append(stock_model)
    crud.create_daily_filtered_stocks(db=db, filtered_stocks=stock_models)


@router.get("/", response_model=List[schemas.DailyStockFilterResponse])
def read_filtered_stocks(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    return crud.get_daily_filtered_stocks(db, skip=skip, limit=limit)


@router.get("/{filter_date}", response_model=List[schemas.DailyStockFilterResponse])
def read_filtered_stocks_by_date(filter_date: date, db: Session = Depends(get_db)):
    stocks = crud.get__daily_filtered_stocks_by_date(db, filter_date=filter_date)
    if not stocks:
        raise HTTPException(status_code=404, detail="No stocks found for this date")
    return stocks


@router.post(
    "/generate_daily_filtered_stocks"
)  # , response_model=schemas.DailyStockFilterResponse)
def generate_daily_stock_filters(
    criteria: schemas.DailyStockFilterGenerate,
    provider: str,
    db: Session = Depends(get_db),
):
    selection_criterias = []
    validation_criterias = []
    for selection_criteria in criteria.selection_criteria:
        selection_criterias.append(SelectionCriteria[selection_criteria.value])
    for validation_criteria in criteria.validation_criteria:
        validation_criterias.append(ValidationCriteria[validation_criteria.value])

    if provider == "YAHOO":
        fp = YahooFinancialsProvider(extraction_lib=YahooExtractionLib.YFINANCE)
        dp = YahooDataProvider(extraction_lib=YahooExtractionLib.YFINANCE)
    else:
        return HTTPException(
            status_code=404, detail="Provider not found or not supported yet"
        )
    select_stock_list = []
    stock_models = crud.get_daily_filtered_stocks(
        db, filter_date=datetime.now().date(), reason="AutoGenerated"
    )
    if not stock_models:
        logger.info("No stocks found for today, generating new list")
        ss = SelectStocks(date=datetime.now(), fp=fp)
        ss.apply_criteria(db, selection_criterias)
        select_stock_list = ss.unique_filtered_list()
        for stock in select_stock_list:
            stock_model = models.DailyStockFilter(
                stock_symbol=stock,
                provider=provider,
                filter_date=datetime.now().date(),
                reason="AutoGenerated",
            )
            stock_models.append(stock_model)
        crud.create_daily_filtered_stocks(db=db, filtered_stocks=stock_models)
    else:
        logger.info("Stocks found for today, using the same list")
        select_stock_list = [stock.stock_symbol for stock in stock_models]
    sf = StockFilteringService(dp=dp)
    if select_stock_list:
        points_df = sf.compute_ranked_stocks(
            db,
            validation_criterias,
            select_stock_list,
        )

    # Convert the result to the response format
    response_data = points_df.to_dict(orient="records")

    return response_data
